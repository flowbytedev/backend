@using Application.Shared.Models
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="ai-chat-widget @(IsExpanded ? "expanded" : "collapsed")" style="@GetWidgetStyle()">
    @if (!IsExpanded)
    {
        <!-- Collapsed Chat Button -->
        <div class="chat-toggle" @onclick="ToggleChat" style="@GetToggleStyle()">
            <FluentIcon Value="@(new Icons.Regular.Size24.Bot())" style="color: white;" />
        </div>
    }
    else
    {
        <!-- Expanded Chat Interface -->
        <div class="chat-container" style="@GetContainerStyle()">
            <!-- Header -->
            <div class="chat-header" style="@GetHeaderStyle()">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Bot())" Color="Color.Lightweight" style="color: white;" />
                    <span style="font-weight: 600; color: white; font-size: 0.875rem;">AI Assistant</span>
                </div>
                <FluentButton Appearance="Appearance.Stealth" 
                            OnClick="ToggleChat"
                            style="color: white; padding: 4px;">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Dismiss())" />
                </FluentButton>
            </div>

            <!-- Messages -->
            <div class="chat-messages" @ref="MessagesContainer" style="@GetMessagesStyle()">
                @if (IsLoading && !Messages.Any())
                {
                    <div style="display: flex; justify-content: center; padding: 20px;">
                        <FluentProgressRing />
                    </div>
                }
                else if (!Messages.Any())
                {
                    <div class="welcome-message" style="@GetWelcomeStyle()">
                        <FluentIcon Value="@(new Icons.Regular.Size48.Bot())" style="margin-bottom: 12px; opacity: 0.6;" />
                        <h4 style="margin: 0 0 8px 0; color: #1f2937;">Welcome to AI Assistant</h4>                        
                        <p style="margin: 0; color: #6b7280; font-size: 0.875rem; text-align: center;">
                            Ask me anything about your data! Use # to reference tables.
                        </p>
                    </div>
                }
                else
                {
                    @foreach (var message in Messages)
                    {
                        <div class="message @(message.IsUser ? "user-message" : "assistant-message")" style="@GetMessageStyle(message.IsUser)">                            
                            @if (!message.IsUser)
                            {
                                <div style="width: 24px; height: 24px; border-radius: 50%; background: #667eea; display: flex; align-items: center; justify-content: center; margin-right: 8px; flex-shrink: 0;">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Bot())" style="color: white;" />
                                </div>
                            }
                            <div class="message-content" style="@GetMessageContentStyle(message.IsUser)">
                                @message.Content                                @if (message.ReferencedTables.Any())
                                {
                                    <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #e5e7eb;">
                                        <div style="font-size: 0.75rem; color: #6b7280; margin-bottom: 4px;">Referenced tables:</div>                                        
                                        @foreach (var table in message.ReferencedTables)
                                        {
                                            <div class="table-ref" style="@GetTableRefStyle()">
                                                <FluentIcon Value="@(new Icons.Regular.Size16.Table())" style="margin-right: 4px;" />
                                                <span style="font-weight: 500;">@table.DatasetName.@table.TableName</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            @if (message.IsUser)
                            {
                                <div style="width: 24px; height: 24px; border-radius: 50%; background: #10b981; display: flex; align-items: center; justify-content: center; margin-left: 8px; flex-shrink: 0;">
                                    <FluentIcon Value="@(new Icons.Regular.Size12.Person())" style="color: white;" />
                                </div>
                            }
                        </div>
                    }
                    
                    @if (IsLoading)
                    {                        
                        <div class="message assistant-message" style="@GetMessageStyle(false)">
                            <div style="width: 24px; height: 24px; border-radius: 50%; background: #667eea; display: flex; align-items: center; justify-content: center; margin-right: 8px; flex-shrink: 0;">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Bot())" style="color: white;" />
                            </div>
                            <div style="display: flex; align-items: center; padding: 8px;">
                                <FluentProgressRing style="width: 16px; height: 16px;" />
                                <span style="margin-left: 8px; color: #6b7280; font-size: 0.875rem;">Thinking...</span>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Input Area -->
            <div class="chat-input" style="@GetInputStyle()">
                <div style="position: relative;">
                    <FluentTextArea @bind-Value="@CurrentMessage" 
                                  @ref="@MessageTextArea"
                                  @oninput="@OnMessageInput"
                                  @onkeydown="@OnMessageKeyDown"
                                  Placeholder="Ask me about your data... Type # to reference tables"
                                  Style="width: 100%; min-height: 40px; max-height: 100px; resize: none; border-radius: 8px;" />
                      <!-- Table Mention Dropdown -->
                    @if (ShowTableDropdown && TableSearchResults.Any())
                    {
                        <div class="table-dropdown" style="@GetDropdownStyle()">
                            @foreach (var table in TableSearchResults.Take(5))
                            {
                                <div class="table-item" 
                                     style="@GetTableItemStyle()"
                                     @onclick="@(() => SelectTable(table))"
                                     @onmouseenter="@((e) => HighlightItem(e))"
                                     @onmouseleave="@((e) => UnhighlightItem(e))">
                                    <FluentIcon Value="@(new Icons.Regular.Size16.Table())" style="margin-right: 8px; color: #10b981;" />
                                    <div>
                                        <div style="font-weight: 600; color: #1f2937; font-size: 0.875rem;">@table.DatasetName.@table.TableName</div>
                                        <div style="color: #6b7280; font-size: 0.75rem;">@table.RowCount rows â€¢ @table.Columns.Count columns</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                
                <div style="display: flex; gap: 8px; justify-content: flex-end; margin-top: 8px;">
                    <FluentButton Appearance="Appearance.Outline" 
                                OnClick="@ClearMessage"
                                Disabled="@(string.IsNullOrWhiteSpace(CurrentMessage))"
                                style="border-radius: 6px; font-size: 0.75rem; padding: 6px 12px;">
                        Clear
                    </FluentButton>                    <FluentButton Appearance="Appearance.Accent" 
                                OnClick="@SendMessage"
                                Disabled="@(string.IsNullOrWhiteSpace(CurrentMessage?.Trim()) || IsLoading)"
                                style="border-radius: 6px; font-size: 0.75rem; padding: 6px 12px;">
                        <FluentIcon Value="@(new Icons.Regular.Size16.ArrowRight())" style="margin-right: 4px;" />
                        Send
                    </FluentButton>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string? CompanyId { get; set; }
    [Parameter] public string? UserId { get; set; }    
    
    private bool IsExpanded = false;
    private bool IsLoading = false;
    private bool ShowTableDropdown = false;
    
    private string CurrentMessage = string.Empty;
    private string CurrentSessionId = string.Empty;
    private List<ChatMessageViewModel> Messages = new();
    private List<TableSearchResult> TableSearchResults = new();
    private List<TableReference> SelectedTableReferences = new();
    
    private ElementReference MessagesContainer;
    private FluentTextArea? MessageTextArea;
    
    private int TableMentionStartPosition = -1;
    private string CurrentTableQuery = string.Empty;public class ChatMessageViewModel
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
        public List<DatasetReference> ReferencedDatasets { get; set; } = new();
        public List<TableReference> ReferencedTables { get; set; } = new();
    }
    
    protected override Task OnInitializedAsync()
    {
        CurrentSessionId = Guid.NewGuid().ToString();
        
        if (!HttpClient.DefaultRequestHeaders.Contains("X-Company-ID") && !string.IsNullOrEmpty(CompanyId))
        {
            HttpClient.DefaultRequestHeaders.Add("X-Company-ID", CompanyId);
        }
        
        return Task.CompletedTask;
    }

    private void ToggleChat()
    {
        IsExpanded = !IsExpanded;
        StateHasChanged();
        
        if (IsExpanded)
        {
            InvokeAsync(async () =>
            {
                await Task.Delay(100);
                await ScrollToBottom();
            });
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(CurrentMessage?.Trim()) || IsLoading)
            return;        
            
        var userMessage = CurrentMessage.Trim();
        var referencedTables = GetReferencedTables();
        
        // Add user message to UI
        Messages.Add(new ChatMessageViewModel
        {
            Content = userMessage,
            IsUser = true,
            Timestamp = DateTime.UtcNow,
            ReferencedTables = referencedTables
        });
        
        CurrentMessage = string.Empty;
        IsLoading = true;
        StateHasChanged();
        
        await ScrollToBottom();

        try
        {
            var request = new ChatRequest
            {
                Message = userMessage,
                TableReferences = SelectedTableReferences.ToList(),
                SessionId = CurrentSessionId
            };

            var response = await HttpClient.PostAsJsonAsync("api/Chat/send", request);
            
            if (response.IsSuccessStatusCode)
            {
                var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponse>();
                if (chatResponse != null)
                {
                    Messages.Add(new ChatMessageViewModel
                    {
                        Content = chatResponse.Message,
                        IsUser = false,
                        Timestamp = chatResponse.Timestamp,
                        ReferencedTables = chatResponse.ReferencedTables
                    });
                    
                    CurrentSessionId = chatResponse.SessionId;
                }
            }
            else
            {
                Messages.Add(new ChatMessageViewModel
                {
                    Content = "Sorry, I encountered an error. Please try again.",
                    IsUser = false,
                    Timestamp = DateTime.UtcNow
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
            Messages.Add(new ChatMessageViewModel
            {
                Content = "Sorry, I encountered an error. Please try again.",
                IsUser = false,
                Timestamp = DateTime.UtcNow
            });
        }
        finally
        {
            IsLoading = false;
            SelectedTableReferences.Clear();
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task OnMessageInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        CurrentMessage = value;
        
        await HandleTableMention(value);
        StateHasChanged();
    }    
    
    private async Task OnMessageKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }    
    
    private async Task HandleTableMention(string content)
    {
        var lastHashIndex = content.LastIndexOf('#');
        
        if (lastHashIndex >= 0)
        {
            var mentionQuery = content.Substring(lastHashIndex + 1);
            var hasSpaceAfterHash = mentionQuery.Contains(' ');
            
            if (!hasSpaceAfterHash && mentionQuery.Length <= 50)
            {
                TableMentionStartPosition = lastHashIndex;
                CurrentTableQuery = mentionQuery;
                await SearchTables(mentionQuery);
                ShowTableDropdown = TableSearchResults.Any();
            }
            else
            {
                ShowTableDropdown = false;
            }
        }
        else
        {
            ShowTableDropdown = false;
        }
    }    
    
    private async Task SearchTables(string query)
    {
        if (string.IsNullOrWhiteSpace(CompanyId))
        {
            TableSearchResults.Clear();
            return;
        }

        try
        {
            var response = await HttpClient.GetFromJsonAsync<List<TableSearchResult>>($"api/Chat/tables/search?query={Uri.EscapeDataString(query)}");
            TableSearchResults = response ?? new List<TableSearchResult>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching tables: {ex.Message}");
            TableSearchResults.Clear();
        }
    }    
    
    private void SelectTable(TableSearchResult table)
    {
        if (TableMentionStartPosition >= 0)
        {
            var beforeMention = CurrentMessage.Substring(0, TableMentionStartPosition);
            var afterMention = CurrentMessage.Substring(TableMentionStartPosition + CurrentTableQuery.Length + 1);
            
            CurrentMessage = $"{beforeMention}#{table.DatasetName}.{table.TableName} {afterMention}";
            
            var tableReference = new TableReference
            {
                Id = table.Id,
                DatasetId = table.DatasetId,
                DatasetName = table.DatasetName,
                TableName = table.TableName,
                Description = table.Description
            };
            
            if (!SelectedTableReferences.Any(t => t.Id == table.Id))
            {
                SelectedTableReferences.Add(tableReference);
            }
        }
        
        ShowTableDropdown = false;
        TableMentionStartPosition = -1;
        CurrentTableQuery = string.Empty;
        StateHasChanged();
    }

    private List<TableReference> GetReferencedTables()
    {        
        return SelectedTableReferences.ToList();
    }

    private void ClearMessage()
    {
        CurrentMessage = string.Empty;
        SelectedTableReferences.Clear();
        ShowTableDropdown = false;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", MessagesContainer);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling: {ex.Message}");
        }
    }    private void HighlightItem(MouseEventArgs e)
    {
        // Simplified highlighting - will be handled via CSS hover states
    }

    private void UnhighlightItem(MouseEventArgs e)
    {
        // Simplified highlighting - will be handled via CSS hover states
    }

    // Style methods
    private string GetWidgetStyle() => IsExpanded ? 
        "position: fixed; bottom: 20px; right: 20px; width: 400px; height: 600px; z-index: 1000; border-radius: 12px; box-shadow: 0 10px 25px rgba(0,0,0,0.15); background: white; border: 1px solid #e5e7eb; display: flex; flex-direction: column;" :
        "position: fixed; bottom: 20px; right: 20px; z-index: 1000;";

    private string GetToggleStyle() =>
        "width: 60px; height: 60px; background: linear-gradient(135deg, #ffffff 0%, #ffffff 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4); transition: transform 0.2s; border: none;" +
        ":hover { transform: scale(1.05); }";

    private string GetContainerStyle() =>
        "display: flex; flex-direction: column; height: 100%; border-radius: 12px; overflow: hidden;";

    private string GetHeaderStyle() =>
        "background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 16px; display: flex; justify-content: space-between; align-items: center;";

    private string GetMessagesStyle() =>
        "flex: 1; overflow-y: auto; padding: 16px; display: flex; flex-direction: column; gap: 12px;";

    private string GetWelcomeStyle() =>
        "text-align: center; padding: 40px 20px; color: #6b7280;";

    private string GetMessageStyle(bool isUser) => isUser ?
        "display: flex; align-items: flex-end; justify-content: flex-end;" :
        "display: flex; align-items: flex-start; justify-content: flex-start;";

    private string GetMessageContentStyle(bool isUser) => isUser ?
        "background: #667eea; color: white; padding: 8px 12px; border-radius: 18px 18px 4px 18px; max-width: 80%; word-wrap: break-word;" :
        "background: #f3f4f6; color: #1f2937; padding: 8px 12px; border-radius: 18px 18px 18px 4px; max-width: 80%; word-wrap: break-word;";

    private string GetDatasetRefStyle() =>
        "display: inline-flex; align-items: center; background: rgba(102, 126, 234, 0.1); color: #667eea; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem; margin-right: 4px; margin-top: 2px;";

    private string GetTableRefStyle() =>
        "display: inline-flex; align-items: center; background: rgba(16, 185, 129, 0.1); color: #10b981; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem; margin-right: 4px; margin-top: 2px;";

    private string GetInputStyle() =>
        "padding: 16px; border-top: 1px solid #e5e7eb; background: white;";

    private string GetDropdownStyle() =>
        "position: absolute; z-index: 1000; background: white; border: 1px solid #d1d5db; border-radius: 6px; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1); max-height: 200px; overflow-y: auto; width: 100%; bottom: 50px;";

    private string GetTableItemStyle() =>
        "padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f3f4f6; transition: background-color 0.2s; display: flex; align-items: center; &:hover { background-color: #f3f4f6; }";    private string GetDatasetItemStyle() =>
        "padding: 8px 12px; cursor: pointer; border-bottom: 1px solid #f3f4f6; transition: background-color 0.2s; display: flex; align-items: center; &:hover { background-color: #f3f4f6; }";
}

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
