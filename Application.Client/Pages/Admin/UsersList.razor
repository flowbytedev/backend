@inject HttpClient _httpClient
@inject IToastService _toastService
@inject NavigationManager _navigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

<div style="min-height: 750px; overflow-x:auto; display:flex; background-color: var(--neutral-layer-1); padding: 4px">
    <FluentDataGrid @ref="dataGrid" 
    Items="@items"
    ResizableColumns=true
    ResizeType="@DataGridResizeType.Discrete"
    HeaderCellAsButtonWithMenu="true"
    Pagination="@pagination"
    TGridItem="ApplicationUser"
    GridTemplateColumns="0.1fr 0.5fr 0.5fr 0.5fr 0.5fr"
    ShowHover="true">

        <SelectColumn TGridItem="ApplicationUser"
                        SelectMode="@DataGridSelectMode.Multiple"
                        @bind-SelectedItems="@SelectedItems" />

        <TemplateColumn Tooltip="true" Title="Id" Align="Align.Start" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Filtered="!string.IsNullOrWhiteSpace(Filter.Id)">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value="@Filter.Id" @bind-Value:after="@(() => HandleFilter())" Placeholder="Id..." />
                </div>
            </ColumnOptions>
            <ChildContent> @**/admin/users/details/{Filter.Id}*@
                <a href="@($"/admin/users/edit/{context.Id}?c={CompanyId}")">@context.Id</a>
            </ChildContent>
            
        </TemplateColumn>
        @* <PropertyColumn Property="@(c => c.Id)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Filtered="!string.IsNullOrWhiteSpace(Filter.Id)">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value="@Filter.Id" @bind-Value:after="@(() => HandleFilter())" Placeholder="Id..." />
                </div>
            </ColumnOptions>
        </Proper tyColumn>*@
        <PropertyColumn Property="@(c => c.UserName)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Filtered="!string.IsNullOrWhiteSpace(Filter.UserName)">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value="@Filter.UserName" @bind-Value:after="@(() => HandleFilter())" Placeholder="Username..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Email)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Filtered="!string.IsNullOrWhiteSpace(Filter.Email)">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value="@Filter.UserName" @bind-Value:after="@(() => HandleFilter())" Placeholder="Email..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.PhoneNumber)" InitialSortDirection=SortDirection.Descending Sortable="true" IsDefaultSortColumn=true Filtered="!string.IsNullOrWhiteSpace(Filter.PhoneNumber)">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value="@Filter.UserName" @bind-Value:after="@(() => HandleFilter())" Placeholder="Phone Number..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>




    </FluentDataGrid>
</div>

<FluentPaginator State="@pagination">
    <SummaryTemplate>
        There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
    </SummaryTemplate>
    <PaginationTextTemplate>
        This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
    </PaginationTextTemplate>
</FluentPaginator>



@code {

    [Parameter] public string CompanyId { get; set; }

    private FluentDataGrid<ApplicationUser> dataGrid;

    static IQueryable<ApplicationUser>? items;

    public ApplicationUser Filter { get; set; } = new ApplicationUser();
    private Dictionary<string, string>? FilterQuery = new Dictionary<string, string>();

    PaginationState pagination = new PaginationState { ItemsPerPage = 100 };
    string nameFilter = string.Empty;
     
    public IEnumerable<ApplicationUser>? SelectedItems { get; set; } = new List<ApplicationUser>();

    

    protected override async Task OnParametersSetAsync()
    {
        var ApplicationUsers = (await GetItem()).AsQueryable();
        items = ApplicationUsers.AsQueryable();
    }


    public async Task<IEnumerable<ApplicationUser>> GetItem(string? filterQuery = null)
    {
        _httpClient.DefaultRequestHeaders.Remove("X-Company-ID");
        _httpClient.DefaultRequestHeaders.Add("X-Company-ID", CompanyId);



        var items = await _httpClient.GetFromJsonAsync<Response<List<ApplicationUser>>>($"api/users?{filterQuery}");

        return items.Items;
    }

    private async Task OnDeleteClick(ApplicationUser ApplicationUser)
    {
        var response = await _httpClient.DeleteAsync($"api/users/{ApplicationUser.UserName}");

        if(response.IsSuccessStatusCode)
        {
            _toastService.ShowInfo($"ApplicationUser *{ApplicationUser.UserName}* deleted successfully");

            // remove the deleted item from the list
            items = items.Where(c => c.UserName != ApplicationUser.UserName);
            
            await dataGrid.RefreshDataAsync();
        }
        else
        {
            _toastService.ShowError("An error occurred while deleting the ApplicationUser");
        }
    }

    private async Task HandleFilter() //ChangeEventArgs args
    {


        UpdateFilterQueryWithReflection();

        // Build something like "?Filter.Code=ABC&Filter.Name=XYZ"
        string queryString = BuildFilterQueryString(FilterQuery);


        items = (await GetItem(queryString)).AsQueryable();

        await dataGrid.RefreshDataAsync();


    }


    private string BuildFilterQueryString(Dictionary<string, string>? filterDict)
    {
        if (filterDict == null || filterDict.Count == 0)
            return string.Empty;

        // Convert each key-value pair into "Filter.Key=URL-ENCODED-VALUE"
        var queryParams = filterDict.Select(
            kvp => $"Filter.{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"
        );

        // Join them with '&' and prepend a '?'
        return string.Join("&", queryParams);
    }


    private void UpdateFilterQueryWithReflection()
    {
        FilterQuery.Clear();

        var properties = typeof(ApplicationUser).GetProperties();
        foreach (var prop in properties)
        {
            var value = prop.GetValue(Filter);
            if (value is string stringValue && !string.IsNullOrWhiteSpace(stringValue))
            {
                // Use the property name as key, e.g. "Code", "Name", etc.
                FilterQuery[prop.Name] = stringValue;
            }
        }
    }



}